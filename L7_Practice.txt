-----Show first and last names of the employees who have the biggest freight.
select first_name, last_name, max(freight) from employees
join orders o on employees.employee_id = o.employee_id
group by first_name, last_name
order by max(freight) desc
limit 3

-----Show first, last names of the employees, their freight who have the freight bigger then avarage.
select first_name, last_name, avg(freight) from employees
join orders o on employees.employee_id = o.employee_id
group by first_name, last_name
having avg(freight) > (select avg(freight) from orders)


-----Show the names of products, that have the biggest price.
select product_name, avg(unit_price) from products
                    group by product_name
having avg(unit_price) > (select avg(unit_price) from products)
order by avg(unit_price) desc
limit 3

-----Show the name of customers with the freight bigger then avarage.
select company_name, avg(freight)
from customers
         join orders o on customers.customer_id = o.customer_id
group by company_name
having avg(freight) > (select avg(freight) from orders)
order by avg(freight) desc
limit 3

-----Show the name of supplier  who delivered the cheapest product.
select company_name from suppliers
join products p on suppliers.supplier_id = p.supplier_id
                    group by company_name
having min(unit_price) = (select min(unit_price) from products)



-----Show the name of the category in which the average price of  a certain product is greater than the grand average in the whole stock.
select category_name
from categories
         join products p on categories.category_id = p.category_id
group by category_name
having avg(unit_price) > (select avg(unit_price) from products)

-----Show the name of the supplier whose delivery  is lower than the grand average in the whole stock.
select company_name from suppliers
join products p on suppliers.supplier_id = p.supplier_id
join order_details od on p.product_id = od.product_id
group by company_name
having avg(od.unit_price) > (select avg(unit_price) from order_details)

-----Show the regions where employees work, the middle age of which is higher than over the whole company.
select e.city
from employees e
group by e.city
having avg(extract(year from age(e.birth_date))) > (
    select avg(extract(year from age(employees.birth_date)))
    from employees);

-----Show customers whose maximum freight level is less than the average for all customers.
select c.company_name
from customers c
         inner join orders o on c.customer_id = o.customer_id
group by c.company_name
having avg(o.freight) <
       (select avg(freight)
        from orders);

-----Show the categories of products for which the average discount is higher than the average discount for all products
select c.category_name
from categories c
         inner join products p on c.category_id = p.category_id
         inner join order_details od on p.product_id = od.product_id
group by c.category_name
having avg(od.discount) > (select avg(discount)
                           from order_details);

-----Calculate the average freight of all employees who work not with Western region.
select avg(o.freight)
    from orders o
where o.employee_id in (
    select e.employee_id
    from employees e
    where e.region not like 'WA' or e.region is null
    )
group by employee_id;

-----Show first and last names of employees who shipped orders in cities of USA.
select e.first_name,
       e.last_name
from employees e
where e.employee_id in (select o.employee_id
                        from orders o
                        where o.ship_country like 'USA');

-----Show the names of products and their total cost, which were delivered by German suppliers
select p.product_name,
       sum((od.quantity * od.unit_price)) as total_sum
from products p
         inner join order_details od on p.product_id = od.product_id
where p.supplier_id in (select s.supplier_id
                       from suppliers s
                       where s.country like 'Germany')
group by p.product_name, od.product_id;

-----Show first and last names of employees that donâ€™t work with Eastern region.
select e.first_name,
       e.last_name
from employees e
where e.region not like 'EA'
   or e.region is null;

-----Show the name of customers that prefer to order non-domestic products.
select company_name
from customers
where country not in (select country
                        from suppliers s
                        where country is not null);

-----Show employees (first and last name) working with orders from the United States.
select e.first_name,
       e.last_name
from employees e
where e.employee_id in (select o.employee_id
                        from orders o
                        where o.ship_country like 'USA');

-----Show the info about orders, that contain the cheapest products from USA.
select o.order_id,
       o.order_date,
       o.shipped_date,
       od.unit_price,
       p.product_name,
       p.product_id
from orders o
         inner join order_details od on o.order_id = od.order_id
         inner join products p on od.product_id = p.product_id
where p.supplier_id in (select s.supplier_id
                        from suppliers s
                        where s.country like 'USA')
order by od.unit_price
limit 50;

-----Show the info about customers that prefer to order meat products and never order drinks.
select c.company_name
from customers c
         inner join orders o on c.customer_id = o.customer_id
         inner join order_details od on o.order_id = od.order_id
         inner join products p on od.product_id = p.product_id
where p.category_id in (
    select category_id
        from categories
        where categories.category_name <> 'Beverages'
          and categories.category_name = 'Meat/Poultry'
    )
group by c.company_name;

-----Show the list of cities where employees and customers are from and where orders have been made to. Duplicates should be eliminated
(select e.city
    from employees e
group by e.city)
union
(select o.ship_city
    from orders o
group by o.ship_city)
union
(select c.city
    from customers c
group by c.city);

-----Show the lists the product names that order quantity equals to 100.
select p.product_name
from products p
where p.product_id in (
    select od.product_id
    from order_details od
    where od.quantity = 100
);







